{"tiddlers":{"$:/core/modules/parsers/wikiparser/rules/sublink.js":{"title":"$:/core/modules/parsers/wikiparser/rules/sublink.js","created":"20170614000913089","modified":"20170614004852192","module-type":"wikirule","type":"application/javascript","text":"/*\\\r\ntitle: $:/core/modules/parsers/wikiparser/rules/prettylink.js\r\ntype: application/javascript\r\nmodule-type: wikirule\n\nWiki text inline rule for pretty links. For example:\n\n```\r\n[[Introduction]]\n\n[[Link description|TiddlerTitle]]\r\n```\n\n\\*/\r\n(function(){\n\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\n\nexports.name = \"sublink\";\r\nexports.types = {inline: true};\n\nexports.init = function(parser) {\r\n\tthis.parser = parser;\r\n\t// Regexp to match\r\n\tthis.matchRegExp = /\\[s(ub)?\\[(.*?)(?:\\|(.*?))?\\]\\]/mg;\r\n};\n\nexports.parse = function() {\r\n\t// Move past the match\r\n\tthis.parser.pos = this.matchRegExp.lastIndex;\r\n\t// Process the link\r\n\tvar text = this.match[2],\r\n\t\tlink = this.match[3] || text;\r\n\tif($tw.utils.isLinkExternal(link)) {\r\n\t\treturn [{\r\n\t\t\ttype: \"element\",\r\n\t\t\ttag: \"a\",\r\n\t\t\tattributes: {\r\n\t\t\t\thref: {type: \"string\", value: link},\r\n\t\t\t\t\"class\": {type: \"string\", value: \"tc-tiddlylink-external\"},\r\n\t\t\t\ttarget: {type: \"string\", value: \"_blank\"},\r\n\t\t\t\trel: {type: \"string\", value: \"noopener noreferrer\"}\r\n\t\t\t},\r\n\t\t\tchildren: [{\r\n\t\t\t\ttype: \"text\", text: text\r\n\t\t\t}]\r\n\t\t}];\r\n\t} else {\r\n\t\treturn [{\r\n\t\t\ttype: \"sublink\",\r\n\t\t\tattributes: {\r\n\t\t\t\tto: {type: \"string\", value: link}\r\n\t\t\t},\r\n\t\t\tchildren: [{\r\n\t\t\t\ttype: \"text\", text: text\r\n\t\t\t}]\r\n\t\t}];\r\n\t}\r\n};\n\n})();\r\n"},"$:/core/modules/widgets/sublink.js":{"title":"$:/core/modules/widgets/sublink.js","created":"20170614001138729","modified":"20170614132020014","module-type":"widget","type":"application/javascript","text":"/*\\\r\ntitle: $:/core/modules/widgets/link.js\r\ntype: application/javascript\r\nmodule-type: widget\n\nLink widget\n\n\\*/\r\n(function(){\n\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\r\nvar MISSING_LINK_CONFIG_TITLE = \"$:/config/MissingLinks\";\n\nvar LinkWidget = function(parseTreeNode,options) {\r\n\tthis.initialise(parseTreeNode,options);\r\n};\n\n/*\r\nInherit from the base widget class\r\n*/\r\nLinkWidget.prototype = new Widget();\n\n/*\r\nRender this widget into the DOM\r\n*/\r\nLinkWidget.prototype.render = function(parent,nextSibling) {\r\n\t// Save the parent dom node\r\n\tthis.parentDomNode = parent;\r\n\t// Compute our attributes\r\n\tthis.computeAttributes();\r\n\t// Execute our logic\r\n\tthis.execute();\r\n\t// Get the value of the tv-wikilinks configuration macro\r\n\tvar wikiLinksMacro = this.getVariable(\"tv-wikilinks\"),\r\n\t\tuseWikiLinks = wikiLinksMacro ? (wikiLinksMacro.trim() !== \"no\") : true,\r\n\t\tmissingLinksEnabled = !(this.hideMissingLinks && this.isMissing && !this.isShadow);\r\n\t// Render the link if required\r\n\tif(useWikiLinks && missingLinksEnabled) {\r\n\t\tthis.renderLink(parent,nextSibling);\r\n\t} else {\r\n\t\t// Just insert the link text\r\n\t\tvar domNode = this.document.createElement(\"span\");\r\n\t\tparent.insertBefore(domNode,nextSibling);\r\n\t\tthis.renderChildren(domNode,null);\r\n\t\tthis.domNodes.push(domNode);\r\n\t}\r\n};\n\n/*\r\nRender this widget into the DOM\r\n*/\r\nLinkWidget.prototype.renderLink = function(parent,nextSibling) {\r\n\tvar self = this;\r\n\t// Sanitise the specified tag\r\n\tvar tag = this.linkTag;\r\n\tif($tw.config.htmlUnsafeElements.indexOf(tag) !== -1) {\r\n\t\ttag = \"a\";\r\n\t}\r\n\t// Create our element\r\n\tvar domNode = this.document.createElement(tag);\r\n\t// Assign classes\r\n\tvar classes = [];\r\n\tif(this.linkClasses) {\r\n\t\tclasses.push(this.linkClasses);\r\n\t}\r\n\tclasses.push(\"tc-tiddlylink\");\r\n\tif(this.isShadow) {\r\n\t\tclasses.push(\"tc-tiddlylink-shadow\");\r\n\t}\r\n\tif(this.isMissing && !this.isShadow) {\r\n\t\tclasses.push(\"tc-tiddlylink-missing\");\r\n\t} else {\r\n\t\tif(!this.isMissing) {\r\n\t\t\tclasses.push(\"tc-tiddlylink-resolves\");\r\n\t\t}\r\n\t}\r\n\tdomNode.setAttribute(\"class\",classes.join(\" \"));\r\n\t// Set an href\r\n\tvar wikiLinkTemplateMacro = this.getVariable(\"tv-wikilink-template\"),\r\n\t\twikiLinkTemplate = wikiLinkTemplateMacro ? wikiLinkTemplateMacro.trim() : \"#$uri_encoded$\",\r\n\t\twikiLinkText = $tw.utils.replaceString(wikiLinkTemplate,\"$uri_encoded$\",encodeURIComponent(this.to));\r\n\twikiLinkText = $tw.utils.replaceString(wikiLinkText,\"$uri_doubleencoded$\",encodeURIComponent(encodeURIComponent(this.to)));\r\n\twikiLinkText = this.getVariable(\"tv-get-export-link\",{params: [{name: \"to\",value: this.to}],defaultValue: wikiLinkText});\r\n\tif(tag === \"a\") {\r\n\t\tdomNode.setAttribute(\"href\",wikiLinkText);\r\n\t}\r\n\tif(this.tabIndex) {\r\n\t\tdomNode.setAttribute(\"tabindex\",this.tabIndex);\r\n\t}\r\n\t// Set the tooltip\r\n\t// HACK: Performance issues with re-parsing the tooltip prevent us defaulting the tooltip to \"<$transclude field='tooltip'><$transclude field='title'/></$transclude>\"\r\n\tvar tooltipWikiText = this.tooltip || this.getVariable(\"tv-wikilink-tooltip\");\r\n\tif(tooltipWikiText) {\r\n\t\tvar tooltipText = this.wiki.renderText(\"text/plain\",\"text/vnd.tiddlywiki\",tooltipWikiText,{\r\n\t\t\t\tparseAsInline: true,\r\n\t\t\t\tvariables: {\r\n\t\t\t\t\tcurrentTiddler: this.to\r\n\t\t\t\t},\r\n\t\t\t\tparentWidget: this\r\n\t\t\t});\r\n\t\tdomNode.setAttribute(\"title\",tooltipText);\r\n\t}\r\n\tif(this[\"aria-label\"]) {\r\n\t\tdomNode.setAttribute(\"aria-label\",this[\"aria-label\"]);\r\n\t}\r\n\t// Add a click event handler\r\n\t$tw.utils.addEventListeners(domNode,[\r\n\t\t{name: \"click\", handlerObject: this, handlerMethod: \"handleClickEvent\"},\r\n\t]);\r\n\t// Make the link draggable if required\r\n\tif(this.draggable === \"yes\") {\r\n\t\t$tw.utils.makeDraggable({\r\n\t\t\tdomNode: domNode,\r\n\t\t\tdragTiddlerFn: function() {return self.to;},\r\n\t\t\twidget: this\r\n\t\t});\r\n\t}\r\n\t// Insert the link into the DOM and render any children\r\n\tparent.insertBefore(domNode,nextSibling);\r\n\tthis.renderChildren(domNode,null);\r\n\tthis.domNodes.push(domNode);\r\n};\n\nLinkWidget.prototype.handleClickEvent = function(event) {\r\n\t// Send the click on its way as a navigate event\r\n\tvar bounds = this.domNodes[0].getBoundingClientRect();\r\n\tthis.dispatchEvent({\r\n\t\ttype: \"tm-navigate\",\r\n\t\tnavigateTo: this.to,\r\n\t\tnavigateFromTitle: this.getVariable(\"storyTiddler\"),\r\n\t\tnavigateFromNode: this,\r\n\t\tnavigateFromClientRect: { top: bounds.top, left: bounds.left, width: bounds.width, right: bounds.right, bottom: bounds.bottom, height: bounds.height\r\n\t\t},\r\n\t\tnavigateSuppressNavigation: event.metaKey || event.ctrlKey || (event.button === 1)\r\n\t});\r\n\tif(this.domNodes[0].hasAttribute(\"href\")) {\r\n\t\tevent.preventDefault();\r\n\t}\r\n\tevent.stopPropagation();\r\n\treturn false;\r\n};\n\n/*\r\nCompute the internal state of the widget\r\n*/\r\nLinkWidget.prototype.execute = function() {\r\n\t// Pick up our attributes\r\n\tthis.to = this.getVariable(\"currentPrefix\", \"\") + this.getAttribute(\"to\",this.getVariable(\"currentTiddler\"));\r\n\tthis.tooltip = this.getAttribute(\"tooltip\");\r\n\tthis[\"aria-label\"] = this.getAttribute(\"aria-label\");\r\n\tthis.linkClasses = this.getAttribute(\"class\");\r\n\tthis.tabIndex = this.getAttribute(\"tabindex\");\r\n\tthis.draggable = this.getAttribute(\"draggable\",\"yes\");\r\n\tthis.linkTag = this.getAttribute(\"tag\",\"a\");\r\n\t// Determine the link characteristics\r\n\tthis.isMissing = !this.wiki.tiddlerExists(this.to);\r\n\tthis.isShadow = this.wiki.isShadowTiddler(this.to);\r\n\tthis.hideMissingLinks = ($tw.wiki.getTiddlerText(MISSING_LINK_CONFIG_TITLE,\"yes\") === \"no\");\r\n\t// Make the child widgets\r\n\tthis.makeChildWidgets();\r\n};\n\n/*\r\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\r\n*/\r\nLinkWidget.prototype.refresh = function(changedTiddlers) {\r\n\tvar changedAttributes = this.computeAttributes();\r\n\tif(changedAttributes.to || changedTiddlers[this.to] || changedAttributes[\"aria-label\"] || changedAttributes.tooltip || changedTiddlers[MISSING_LINK_CONFIG_TITLE]) {\r\n\t\tthis.refreshSelf();\r\n\t\treturn true;\r\n\t}\r\n\treturn this.refreshChildren(changedTiddlers);\r\n};\n\nexports.sublink = LinkWidget;\n\n})();\r\n"},"$:/plugins/mklauber/SubStory/EditTemplate":{"title":"$:/plugins/mklauber/SubStory/EditTemplate","created":"20170613200400571","modified":"20170613233118723","tags":"","text":"\\define frame-classes()\r\ntc-tiddler-edit-frame $(missingTiddlerClass)$ $(shadowTiddlerClass)$ $(systemTiddlerClass)$\r\n\\end\r\n<div class=<<frame-classes>>>\r\n<$set name=\"storyTiddler\" value=<<currentTiddler>>>\r\n<$keyboard key={{$:/config/shortcuts/cancel-edit-tiddler}} message=\"tm-cancel-tiddler\">\r\n<$keyboard key={{$:/config/shortcuts/save-tiddler}} message=\"tm-save-tiddler\">\r\n<$list filter=\"[all[shadows+tiddlers]tag[$:/tags/EditTemplate]!has[draft.of]]\" variable=\"listItem\">\r\n<$transclude tiddler=<<listItem>>/>\r\n</$list>\r\n</$keyboard>\r\n</$keyboard>\r\n</$set>\r\n</div>\r\n"},"$:/plugins/mklauber/SubStory/Template":{"title":"$:/plugins/mklauber/SubStory/Template","created":"20170613230545399","modified":"20180307211004525","tags":"$:/tags/ViewTemplate","text":"\\define root() $:/substory/$(currentTiddler)$/\r\n\\define story() $:/temp/substory/$(currentTiddler)$/\r\n\\define history() $:/temp/substory/$(currentTiddler)$/history\n\n<$list filter=\"[all[shadows+tiddlers]is[current]tag[SubStory]]\">\n\n<$set name=\"currentPrefix\" value=<<root>> >\r\n<$navigator story=<<story>>  history=<<history>>>\n\n<$transclude />\n\n<$list filter=\"[list<story>]\" history=<<history>>  template=\"$:/plugins/mklauber/SubStory/ViewTemplate\" editTemplate=\"$:/plugins/mklauber/SubStory/EditTemplate\" />\n\n</$navigator>\r\n</$set>\r\n</$list>"},"$:/plugins/mklauber/SubStory/ViewTemplate":{"title":"$:/plugins/mklauber/SubStory/ViewTemplate","created":"20170613200157145","modified":"20170613233129935","tags":"","text":"\\define frame-classes()\r\n tc-tiddler-view-frame $(missingTiddlerClass)$ $(shadowTiddlerClass)$ $(systemTiddlerClass)$ $(tiddlerTagClasses)$\r\n\\end\r\n\\define folded-state()\r\n$:/state/folded/$(currentTiddler)$\r\n\\end\r\n\\define title-styles()\r\nfill:$(foregroundColor)$;\r\n\\end\r\n\\define config-title()\r\n$:/config/ViewToolbarButtons/Visibility/$(listItem)$\r\n\\end\n\n<$set name=\"storyTiddler\" value=<<currentTiddler>>><$set name=\"tiddlerInfoState\" value=<<qualify \"$:/state/popup/tiddler-info\">>><$tiddler tiddler=<<currentTiddler>>><div class=<<frame-classes>>>\r\n<$reveal type=\"nomatch\" text=\"\" default=\"\" state=<<tiddlerInfoState>> class=\"tc-tiddler-info tc-popup-handle\" animate=\"yes\" retain=\"yes\">\r\n<$transclude tiddler=\"$:/core/ui/TiddlerInfo\"/>\r\n</$reveal>\n\n<div class=\"tc-tiddler-title\">\r\n<div class=\"tc-titlebar\">\r\n<span class=\"tc-tiddler-controls\">\r\n<$list filter=\"[all[shadows+tiddlers]tag[$:/tags/ViewToolbar]!has[draft.of]]\" variable=\"listItem\"><$reveal type=\"nomatch\" state=<<config-title>> text=\"hide\"><$transclude tiddler=<<listItem>>/></$reveal></$list>\r\n</span>\r\n<$set name=\"tv-wikilinks\" value={{$:/config/Tiddlers/TitleLinks}}>\r\n<$link>\r\n<$set name=\"foregroundColor\" value={{!!color}}>\r\n<span class=\"tc-tiddler-title-icon\" style=<<title-styles>>>\r\n<$transclude tiddler={{!!icon}}/>\r\n</span>\r\n</$set>\r\n<$list filter=\"[all[current]removeprefix<currentPrefix>]\">\r\n<h2 class=\"tc-title\" title={{$:/language/SystemTiddler/Tooltip}}>\r\n<$text text=<<currentTiddler>>/>\r\n</h2>\r\n</$list>\r\n<$list filter=\"[all[current]!prefix[$:/]]\">\r\n<h2 class=\"tc-title\">\r\n<$view field=\"title\"/>\r\n</h2>\r\n</$list>\r\n</$link>\r\n</$set>\r\n</div>\n\n<$reveal type=\"nomatch\" text=\"\" default=\"\" state=<<tiddlerInfoState>> class=\"tc-tiddler-info tc-popup-handle\" animate=\"yes\" retain=\"yes\">\n\n<$transclude tiddler=\"$:/core/ui/TiddlerInfo\"/>\n\n</$reveal>\r\n</div>\r\n<$list filter=\"[all[shadows+tiddlers]tag[$:/tags/ViewTemplate]!has[draft.of]] -[[$:/core/ui/ViewTemplate/title]]\" variable=\"listItem\">\r\n<$transclude tiddler=<<listItem>>/>\r\n</$list>\r\n</div>\r\n</$tiddler></$set></$set>\r\n"},"$:/plugins/mklauber/SubStory/readme":{"title":"$:/plugins/mklauber/SubStory/readme","created":"20180309191333059","hide-body":"yes","modified":"20180309192220321","tags":"SubStory","text":"This plugin is designed to make it simpler to reuse titles between different areas within the same tiddlywiki.  \n\nTo create a subsection of a wiki tag the top level page with the tag <<tag SubStory>>, and set the field `hide-body` == `yes`.  Now, that tiddler will behave as if it was it's own story river.  Links clicked within the body of that text will show up within that tiddler, and you can use a new link format `[s[...]]` to have links to tiddlers that are automatically prefixed with `$:/substory/{tagged tiddler}/`.  \n\nTo see how this works, feel free to click the following:\n\n* [[GettingStarted]]\r\n* [s[Example]]\r\n"}}}