{
    "tiddlers": {
        "$:/plugins/telmiger/ColorAction/coloraction.js": {
            "text": "/*\\\ntitle: $:/plugins/telmiger/ColorAction/coloraction.js\ntype: application/javascript\nmodule-type: macro\n\nBased on TinyColor by Brian Grinstead: $:/plugins/telmiger/ColorAction/tinycolor.js\nExtended, adapted and documented for TiddlyWiki 5 by Thomas Elmiger\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nInformation about this macro\n*/\n\nexports.name = \"coloraction\";\n\nexports.params = [\n     {name: \"color\", default: \"#000\"},\n     {name: \"mod\", default: false},\n     {name: \"value\", default: false},\n     {name: \"alpha\", default: false},\n     {name: \"action\", default: \"toRgbString\"}\n];\n\nif (typeof window !== 'undefined') {\n  var tinycolor = require(\"$:/plugins/telmiger/ColorAction/tinycolor.js\");\n}\n\n/*\nWikify\n*/\nfunction wikifyText(t) {\n\tvar Parser = $tw.wiki.parseText(\"text/vnd.tiddlywiki\",t,{\n\t\t\tparseAsInline: true\n\t\t});\n\tvar WidgetNode = $tw.wiki.makeWidget(Parser,{\n\t\t\tdocument: $tw.fakeDocument\n\t\t});\n\tvar Container = $tw.fakeDocument.createElement(\"div\");\n\tWidgetNode.render(Container,null);\n\treturn Container.textContent;\n}\n\n/*\nPrecision for decimals\n*/\nfunction addPrecisionDecimals(value,decimals) { \n    const beforecomma = value.toString().split('.')[0].length;\n    const precision = beforecomma + parseInt(decimals);\n    return (precision > 0 && precision < 101) ? value.toPrecision(precision) : \"invalid decimals\";\n}\n\n/* \nalphaBlend – idea adapted from https://github.com/bgrins/TinyColor/issues/157\n*/\nfunction alphaBlend(color1,color2) {\n   const basecolor = tinycolor(color1);\n   const blendcolor = tinycolor(color2);\n   const base = [basecolor._r, basecolor._g, basecolor._b, basecolor._a];\n   const add = [blendcolor._r, blendcolor._g, blendcolor._b, blendcolor._a];\n   let mix = [];\n   mix[3] = 1 - (1 - add[3]) * (1 - base[3]); // alpha\n   mix[0] = Math.round((add[0] * add[3] / mix[3]) + (base[0] * base[3] * (1 - add[3]) / mix[3])); // red\n   mix[1] = Math.round((add[1] * add[3] / mix[3]) + (base[1] * base[3] * (1 - add[3]) / mix[3])); // green\n   mix[2] = Math.round((add[2] * add[3] / mix[3]) + (base[2] * base[3] * (1 - add[3]) / mix[3])); // blue\n   const finalcolor = tinycolor.fromRatio({r: mix[0], g: mix[1], b: mix[2], a: mix[3]});\n   return finalcolor.toRgbString(); \n}\n\n/* \nalphaContrast – calculate alpha against a background first\n*/\nfunction alphaContrast(background,foreground) {\n   // maybe calculate a ± margin like Lea Verou does on https://leaverou.github.io/contrast-ratio/ ?\n   // color.overlayOn(Color.BLACK).luminance + ' - ' + color.overlayOn(Color.WHITE).luminance;\n   let color1 = background;\n   const alpha1 = tinycolor(background).getAlpha();\n   if(alpha1 < 1) {\n      if(tinycolor(foreground).isLight() && tinycolor(background).isDark()) {\n         color1 = alphaBlend(\"#000\", background);\n      }\n      else {\n         color1 = alphaBlend(\"#fff\", background);\n      }\n   }\n   // if foreground has transparency do an alphaBlend on background\n   const alpha2 = tinycolor(foreground).getAlpha();\n   const color2 = alpha2 < 1 ? alphaBlend(color1, foreground) : foreground;\n   return tinycolor.readability(color1, color2);\n}\n\n/* \nprecisionContrast – indicate precision for alphaContrast\n*/\nfunction precisionContrast(background,foreground,decimals,indicator) {\n   const contrast = alphaContrast(background, foreground);\n   const result = addPrecisionDecimals(contrast, decimals);\n   const alpha = tinycolor(background).getAlpha();\n   return alpha < 1 && indicator ? indicator + result : result;\n}\n\n/* \ninvert – convert to negative\n*/\nfunction invert(color) {\n   const basecolor = tinycolor(color);\n   const base = [basecolor._r, basecolor._g, basecolor._b, basecolor._a];\n   let inverted = [];\n   inverted[0] = Math.round(255 - base[0]); // red\n   inverted[1] = Math.round(255 - base[1]); // green\n   inverted[2] = Math.round(255 - base[2]); // blue\n   const finalcolor = tinycolor.fromRatio({r: inverted[0], g: inverted[1], b: inverted[2], a: base[3]});\n   return finalcolor.toRgbString(); \n}\n\n/* \ninvertBrightness\n*/\nfunction invertBrightness(color) {\n   const basecolor = tinycolor(color);\n   const brightness = basecolor.getBrightness(); // 0–255\n   const shift = Math.round((255 - (brightness * 2)) / 2.55);\n   let inverted = shift >= 0 ? basecolor.brighten(shift) : basecolor.darken(shift * -1);\n   return inverted.toRgb(); \n}\n\n/*\nRun the macro\n*/\nexports.run = function(color,mod,value,alpha,action) {\n   var result = \"\";\n   var color1 = wikifyText(color);\n   var mycolor = color1 !== \"random\" ? tinycolor(color1) : tinycolor.random();\n   if(value === false) {\n      // set default\n      value = mod === \"mix\" ? 50 : 10;\n   }\n   // apply modification\n   if(mod) {\n      if(mod === \"lighten\" || mod === \"brighten\" || mod === \"darken\"\n         || mod === \"desaturate\" || mod === \"saturate\" || mod === \"spin\") {\n            mycolor[mod](parseInt(value, 10));\n      }\n      else if(mod === \"greyscale\") {\n         mycolor[mod]();\n      }\n      else if(mod === \"complement\") {\n         mycolor.spin(180);\n      }\n      else if(mod === \"invert\") {\n         mycolor = tinycolor(invert(color1));\n      }\n      else if(mod === \"invertBrightness\") {\n         mycolor = tinycolor(invertBrightness(color1));\n      }\n      else if(action === \"getContrast\" || action === \"getReadability\" \n         || action === \"mix\" || action === \"alphablend\" || action === \"compare\" || action === \"equals\") {\n         // set mod as color2, don’t use alpha param\n         let secondcolor = wikifyText(mod);\n         var color2 = tinycolor(secondcolor).toRgbString();\n         alpha = false;\n      }\n   }\n   // set alpha\n   if(alpha) {\n      mycolor.setAlpha(alpha);\n   }\n   // execute action\n   if(action !== \"toRgbString\") {\n      if(action === \"getBrightness\" || action === \"getFormat\" || action === \"getLuminance\"\n         || action === \"getAlpha\" || action === \"isLight\" || action === \"isDark\"|| action === \"isValid\"\n         || action === \"toHexString\" || action === \"toHsvString\" || action === \"toHslString\"\n         || action === \"toHex\"|| action === \"toName\" || action === \"toFilter\") {\n            result = mycolor[action]();\n      }\n      else if(action === \"toHsl\" || action === \"toHsv\") {\n         let objResult = mycolor[action]();\n         result = JSON.stringify(objResult);\n      }\n      else if(action === \"getContrast\") {\n         result= precisionContrast(color1, color2, 1, \"~\");\n      }\n      else if(action === \"getReadability\") {\n         let contrastratio = precisionContrast(color1, color2, 1);\n         result = contrastratio >= 3 ? \"AA large\" : \"fail\";\n         result = contrastratio >= 4.5 ? \"AAA large/AA small\" : result;\n         result = contrastratio >= 7 ? \"AAA small\" : result;\n      }\n      else if(action === \"mix\") {\n         result = tinycolor.mix(color1, color2, value);\n      }\n      else if(action === \"alphablend\") {\n         result = alphaBlend(color1, color2);\n      }\n      else if(action === \"equals\") {\n         result = tinycolor.equals(color1, color2);\n      }\n      else if(action === \"getOriginalInput\") {\n         result = mycolor.getOriginalInput();\n      }\n   }\n   else {\n      result = mycolor.toRgbString(); \n   }\n   result = result === 0 ? \"0\" : result;\n   result = result === false ? \"false\" : result;\n   return result;\n};\n\n})();\n",
            "type": "application/javascript",
            "title": "$:/plugins/telmiger/ColorAction/coloraction.js",
            "tags": "StylesheetManager",
            "module-type": "macro",
            "modifier": "Thomas Elmiger",
            "modified": "20180128092244840",
            "creator": "Thomas Elmiger",
            "created": "20170626211546891"
        },
        "$:/plugins/telmiger/ColorAction/colors": {
            "created": "20180104210557083",
            "creator": "Thomas Elmiger",
            "text": "!!! Named Colors\n\n[[TinyColor|https://github.com/bgrins/TinyColor]] supports named colors according to ''W3C Extended color keywords'' supported by popular browsers. The list is the same as the SVG 1.0 color keyword names.\n\nSee https://www.w3.org/TR/css-color-3/#svg-color\n\n\n!!! Note for developers\nThe list of colours might be the same as in $:/core/modules/utils/dom/csscolorparser.js (var kCSSColorTable). Maybe we can import it from there in the future?",
            "title": "$:/plugins/telmiger/ColorAction/colors",
            "tags": "",
            "modifier": "Thomas Elmiger",
            "modified": "20180106170406842"
        },
        "$:/plugins/telmiger/ColorAction/licence": {
            "text": "`TinyColor and ColorAction are both published under the MIT Licence.`\n\n!!! TinyColor\nThe library in $:/plugins/telmiger/ColorAction/tinycolor.js is<br>\nCopyright (c), Brian Grinstead, https://briangrinstead.com\n\n!!! ColorAction\nThe macro in $:/plugins/telmiger/ColorAction/coloraction.js is<br>\nCopyright (c), Thomas Elmiger, https://thomas-elmiger.ch\n\n!!! MIT Licence\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "title": "$:/plugins/telmiger/ColorAction/licence",
            "tags": "",
            "modifier": "Thomas Elmiger",
            "modified": "20180104064048013",
            "creator": "Thomas Elmiger",
            "created": "20180104062422859"
        },
        "$:/plugins/telmiger/ColorAction/readme": {
            "created": "20180102220706333",
            "creator": "Thomas Elmiger",
            "text": "{{$:/plugins/telmiger/ColorAction/about}}\n\nThe macro handles most methods from https://github.com/bgrins/TinyColor#methods plus some additional ones: //invert//, //invertBrightness// and //alphablend//.\n\n!!! Syntax and attributes\n\nNote: if the color input is not valid then the macro will act like it was //black// when being used with other actions than //isValid//.\n\n`<<coloraction #000 lighten 95 .5 toHex>>`\n<br>Result: <<coloraction #000 lighten 95 .5 toHex>>\n\n```\n<$macrocall $name=\"coloraction\" color=\"#000\" mod=\"lighten\" value=\"95\" alpha=\".5\" action=\"toHex\"/>\n```\nResult: <$macrocall $name=\"coloraction\" color=\"#000\" mod=\"lighten\" value=\"95\" alpha=\".5\" action=\"toHex\"/>\n\n!!!! Default attribute values\n* color: #000\n* mod: false\n* value: 10 / 50 for action \"mix\"\n* alpha: false\n* action: toRgbString\n\n!!!! Modifications (mod)\n* lighten\n* brighten\n* darken\n* desaturate\n* saturate\n* greyscale\n\n''Modification utilities''\n\n* //spin// gets you another color from the color wheel which is tuned //value// degrees\n* //complement// (implemented with a spin-workaround)\n* //invert// \n* //invertBrightness//\n* Get a random color: Use //random// instead of a color value.\n\n!!!! Alpha\n* setAlpha is implemented as a separate parameter //alpha.//\n\n!!!! Actions\n\n* getFormat\n* getBrightness\n* isValid\n* isLight\n* isDark\n* getAlpha\n* getLuminance\n* getOriginalInput\n* toHex\n* toHsl – returns a JSON-string\n* toHsv – returns a JSON-string\n* toHexString\n* toHslString\n* toHsvString\n* toName\n* toFilter\n\n---\n\n!!! Two color actions\nThe second attribute //mod// is used as second color.\n\n* color: background\n* color2: foreground\n\n!!!! Readability and contrast\nImplementations differ from https://github.com/bgrins/TinyColor#readability\n\n//NB:// If the first/background color has an alpha < 1 we assume a white or black background behind it. If the foreground is light and the background is dark, then black is used, else white. The lack of precision is indicated using a tilde ~ in front of the resulting value. \n\n```\n<$macrocall $name=\"coloraction\" color=\"#000\" mod=\"#f59\" action=\"getReadability\"/>\n```\n\nResult: <$macrocall $name=\"coloraction\" color=\"#000\" mod=\"#f59\" action=\"getReadability\"/>\n\n* getContrast\n** Returns the contrast ratio between two colors.\n* getReadability\n** Returns the best grade of the following:\n**# AAA small (>= 7:1)\n**# AAA large/AA small (>= 4.5:1)\n**# AA large (>= 3:1)\n**# fail (< 3:1)\n\n!!!! Mix \n* //value// defines the percentage of color2 (defaults to 50)\n* alpha value is mixed separately\n\n```\n<<coloraction \"rgb(100,0,0)\" \"rgba(0,0,100,.5)\" \"75\" action:\"mix\">>\n```\nResult: <$macrocall $name=\"coloraction\" color=\"rgb(100,0,0)\" mod=\"rgba(0,0,100,.5)\" value=\"75\" action=\"mix\"/>\n\n!!!! Alphablend\nThis uses color1 as background and color2/mod as a foreground overlay. \n\n* For optimal results color2 should have an alpha value < 1 so some of the background is blended in. \n* Any //value// attribute is ignored.\n\n```\n<<coloraction \"rgb(100,0,0)\" \"rgba(0,0,100,.5)\" action:\"alphablend\">>\n```\nResult: <<coloraction \"rgb(100,0,0)\" \"rgba(0,0,100,.5)\" action:\"alphablend\">>\n\n!!!! Equals – is it the same?\n\n```\n<<coloraction \"rgba(0,0,255,1)\" #00f action:\"equals\">>\n```\nResult: <<coloraction \"rgba(0,0,255,1)\" #00f action:\"equals\">>\n\n---\n\n!!! Not implemented\n* isReadable – we have getReadability instead\n* mostReadable – TW has $:/core/modules/macros/contrastcolour.js for this (?)\n* Color Combinations other than //complement//\n** analogous\n** monochromatic\n** splitcomplement\n** triad\n** tetrad\n* clone\n* maybe I overlooked something …",
            "title": "$:/plugins/telmiger/ColorAction/readme",
            "tags": "",
            "modifier": "Thomas Elmiger",
            "modified": "20200607201419634"
        },
        "$:/plugins/telmiger/ColorAction/tinycolor.js": {
            "text": "// TinyColor v1.4.1\n// https://github.com/bgrins/TinyColor\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\n\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (typeof define === 'function' && define.amd) {\n    define(function () {return tinycolor;});\n}\n// Browser: Expose to window\nelse {\n    window.tinycolor = tinycolor;\n}\n\n})(Math);\n",
            "type": "application/javascript",
            "title": "$:/plugins/telmiger/ColorAction/tinycolor.js",
            "module-type": "library",
            "modifier": "Thomas Elmiger",
            "modified": "20180104210121385",
            "creator": "Thomas Elmiger",
            "created": "20180102215141661"
        },
        "$:/plugins/telmiger/ColorAction/usage": {
            "created": "20180104211952441",
            "creator": "Thomas Elmiger",
            "text": "Documentation is not as extensive as one could wish at the moment. You can open [[this tiddler|$:/plugins/telmiger/ColorAction/usage]] in edit mode and activate the preview to compare macros and results.\n\n!!! Usage and Examples\n\n!!!! Actions\n\n* No parameters: <<coloraction>>\n* Color only (red): <<coloraction red>>\n* getFormat: <<coloraction #fff action:getFormat>>\n* Brightness of red: <<coloraction red action:getBrightness>>\n* Luminance of black: <<coloraction black action:getLuminance>>\n* Check input: <$macrocall $name=\"coloraction\" color=<<--white>> alpha=\".5\" action=\"getOriginalInput\"/>\n** Input core colour macro: <$macrocall $name=\"coloraction\" color=<<colour primary>> action=\"getOriginalInput\"/> \n* Named colours: #f00 is ''<<coloraction #f00 action:toName>>''\n* Filter: <<coloraction #f00 action:toFilter>>\n\n---\n\n!!! Modifications\n\n* darken f00: <<coloraction #f00 darken>>\n* lighten the result: <<coloraction \"rgb(204, 0, 0)\" lighten>>\n* lighten black, apply alpha: <<coloraction #000 lighten 95 .5>>\n* brighten red: <<coloraction #f00 brighten 50>>\n* convert to greyscale: <<coloraction \"rgb(204, 102, 102)\" greyscale>>\n* desaturate to grey:<<coloraction \"rgb(204, 102, 102)\" desaturate 100>>\n* saturate 30/255: <<coloraction \"rgb(204, 102, 102)\" saturate 30>>\n* saturate 100: <<coloraction \"rgb(99, 100, 100)\" saturate 100>>\n\n!!!! Saturate gray color? It turns redish.\n`<<coloraction \"rgb(20, 20, 20)\" saturate 100>>`\n\nResult: <<coloraction \"rgb(20, 20, 20)\" saturate 100>>\n\n\n!!!! Complement\n* Page background, complement of <$macrocall $name=coloraction color=<<colour page-background>> action=getOriginalInput/> is this: <$macrocall $name=coloraction color=<<colour page-background>> mod=complement/>\n* complement for #f00: <<coloraction #f00 complement action:toHex>>\n** backwards from #00ffff: <<coloraction #00ffff complement action:toHex>>\n* complement with alpha 0.3: <<coloraction \"rgba(200, 20, 20, .3)\" complement>>\n\nThe //complement// modification is implemented as a spin with a value of 180 (the result is the same). \n\n!!!! Invert\nOther than complement, this inverts the brightness of a colour too: \n\n* invert #f00: <<coloraction #f00 invert action:toHex>>\n* invert #333: <<coloraction #333 invert action:toHex>>\n* invert with alpha 0.3: <<coloraction \"rgba(200, 20, 20, .3)\" invert>>\n\n\n!!!! Spinning\n* spin 360 returns input, e.g. for #f00: <<coloraction #f00 spin 360 1 toHexString>>\n* spin 90: <<coloraction #f00 spin 90>>\n* spin 180: <<coloraction #f00 spin 180>>\n* Spin the variable for page-background: <$macrocall $name=coloraction color=<<colour page-background>> mod=\"spin\" value=\"180\"/>\n* negative spin works too: <<coloraction #f00 spin -180>>\n\n---\n\n!!!! Mix and Alphablend\n\nmix: <<coloraction \"rgb(100,0,0)\" \"rgba(0,0,100,.5)\" \"75\" action:\"mix\">>\n\nmix default (50): <<coloraction \"rgb(100,0,0)\" \"rgb(0,0,100)\" action:\"mix\">>\n\nalphablend: <<coloraction \"rgba(0, 0, 0, .5)\" \"rgba(0, 10, 100, .5)\" .5 action:\"alphablend\">>\n\nalphablend2 – <<coloraction \"rgb(200, 100, 50)\" \"rgba(250,200,100, .5)\" .5 action:\"alphablend\">>\n\n---\n\n!!!! Random colors\n<<coloraction random>><br>\n<<coloraction random>>\n",
            "title": "$:/plugins/telmiger/ColorAction/usage",
            "tags": "",
            "modifier": "Thomas Elmiger",
            "modified": "20180128100812041"
        },
        "$:/plugins/telmiger/ColorAction/icon": {
            "text": "<svg class=\"tc-image-button telmiger-icon\" viewBox=\"0 0 128 128\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" aria-labelledby=\"title\">\n  <path class=\"circle\" d=\"M64 2a62 62 0 100 124A62 62 0 0064 2z\" fill=\"#e2001a\"/>\n  <path class=\"t\" d=\"M100.4 63.3a26 26 0 01-14 2.8h-8c-4.2 0-7.3.9-9.2 2.6-2 1.7-3.5 5-4.6 10.2 0 0-.2 1.4-.5 1.4s-.4-.8-.5-1.5a37.9 37.9 0 00-.7-2.8c-.7-2.1-1.3-3.7-2-4.8a10 10 0 00-2.8-3.3 8.3 8.3 0 00-4-1.5L52 66H41.7c-6.1 0-10.7-1-13.7-2.8-5-3.2-7.6-9.2-8-18l.1-2.1h.6c.4 4 3.7 7 6.1 9.2 2.4 2.2 6.3 3.2 11.6 3.2h9.3c5.4 0 9.3 1.3 11.7 3.7a18 18 0 014.4 10.4c.1.5 0 .8.2.8s.1-.3.2-.8c.7-6.1 3-10.2 7.1-12.3 2.5-1.3 6.4-2 11.9-1.9l6.3.1c4.3.1 8-.7 11-2.5 2.9-1.8 6.4-5 6.8-10h.5c.2.6.2 1.6.2 2.4-.4 8.8-3 14.7-7.6 17.8z\" fill=\"#fff\"/>\n</svg>",
            "title": "$:/plugins/telmiger/ColorAction/icon",
            "tags": "",
            "modified": "20200604221719750",
            "created": "20200604221532918"
        },
        "$:/plugins/telmiger/ColorAction/support": {
            "created": "20200607195734703",
            "text": "{{$:/plugins/telmiger/support}}",
            "title": "$:/plugins/telmiger/ColorAction/support",
            "tags": "",
            "modified": "20200607195849209"
        },
        "$:/plugins/telmiger/support": {
            "created": "20200607195635635",
            "text": "!! Support the Author\n\n''Hi!'' I’m Thomas, the author of [[tid.li/tw5/plugins.html|https://tid.li/tw5/plugins.html]]. Feedback is always welcome, as well as funding for maintenance, support and new projects :)\n\n---\n\n!!! One Time Support\n\nIf using my plugins just makes you happy, consider a one time payment via ~PayPal to reward the effort:\n\nhttps://www.paypal.me/telmiger\n\n---\n\n!!! Permanent Support\n\nIf my tools make you more productive or save you time in your job or your everyday life, you can support me as a Patron: \n\nhttps://www.patreon.com/telmiger\n\n---\n\n!!! Thank You\n\nSubstantial parts of my availabe time go to the deveopment of useful plugins for [[TiddlyWiki|https://tiddlywiki.com/]]. – Many others do the same and I would like to thank them all, especially [[Jeremy Ruston|https://tiddlywiki.com/#JeremyRuston]] and all the active members of the community!\n\n//Hereby I promise to share future revenues (if any) with other developers who’s works I use or who inspired me.//\n\nIf you like my work, I would be very happy to hear from you.\n\n''Thank you very much for your support!''<br>\n//Thomas//\n\nhttps://thomas-elmiger.ch",
            "title": "$:/plugins/telmiger/support",
            "tags": "",
            "modifier": "Thomas Elmiger",
            "modified": "20200607195645379",
            "creator": "Thomas Elmiger"
        },
        "$:/plugins/telmiger/ColorAction/about": {
            "created": "20200607201415444",
            "modified": "20200607201415445",
            "title": "$:/plugins/telmiger/ColorAction/about",
            "text": "Use one or two colors and one or two of these features:\n\n* ''actions'' get information about a color\n* ''modifications'' calculate a new color\n** optionally set an ''alpha'' value for the result\n* ''utilities'' create a random color or spin the color wheel\n* ''two color actions'' compare or combine colors",
            "tags": ""
        }
    }
}